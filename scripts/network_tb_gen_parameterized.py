# Copyright (C) 2016 Siavoosh Payandeh Azad

import random 

# -D [size]: sets the size of the network, it can be powers of two
# -Rand: generates random traffic patterns

import sys
if '-D'  in sys.argv[1:]:
  network_dime = int(sys.argv[sys.argv.index('-D')+1])
else:
  network_dime = 4

if '-Rand'  in sys.argv[1:]:
  random_dest = True
else:
  random_dest = False

if '-FI'  in sys.argv[1:]: 
  add_FI = True
else:
  add_FI = False

data_width = 32

file_name= 'tb_network'
if random_dest:
  file_name += '_rand'
if add_FI:
  file_name += '_FI'

noc_file = open(file_name+'_'+str(network_dime)+"x"+str(network_dime)+'.vhd', 'w')


noc_file.write("--Copyright (C) 2016 Siavoosh Payandeh Azad\n")
noc_file.write("------------------------------------------------------------\n")
noc_file.write("-- This file is automatically generated!\n")
noc_file.write("-- Here are the parameters:\n")
noc_file.write("-- \t network size x:"+str(network_dime)+"\n")
noc_file.write("-- \t network size y:"+str(network_dime)+"\n")
noc_file.write("------------------------------------------------------------\n\n")

noc_file.write("library ieee;\n")
noc_file.write("use ieee.std_logic_1164.all;\n")
noc_file.write("use IEEE.STD_LOGIC_ARITH.ALL;\n")
noc_file.write("use IEEE.STD_LOGIC_UNSIGNED.ALL;\n")
noc_file.write("use work.TB_Package.all;\n\n")
noc_file.write("USE ieee.numeric_std.ALL; \n")
noc_file.write("use IEEE.math_real.\"ceil\";\n")
noc_file.write("use IEEE.math_real.\"log2\";\n\n")

noc_file.write("entity tb_network_"+str(network_dime)+"x"+str(network_dime)+" is\n")
 
noc_file.write("end tb_network_"+str(network_dime)+"x"+str(network_dime)+"; \n")


noc_file.write("\n\n")
noc_file.write("architecture behavior of tb_network_"+str(network_dime)+"x"+str(network_dime)+" is\n\n")

noc_file.write("-- Declaring network component\n")

 
noc_file.write("component network_"+str(network_dime)+"x"+str(network_dime)+" is\n")
noc_file.write(" generic (DATA_WIDTH: integer := 32);\n")
noc_file.write("port (reset: in  std_logic; \n")
noc_file.write("\tclk: in  std_logic; \n")
for i in range(network_dime*network_dime):
  noc_file.write("\t--------------\n")
  noc_file.write("\tRX_L_"+str(i)+": in std_logic_vector (DATA_WIDTH-1 downto 0);\n")
  noc_file.write("\tRTS_L_"+str(i)+", CTS_L_"+str(i)+": out std_logic;\n")
  noc_file.write("\tDRTS_L_"+str(i)+", DCTS_L_"+str(i)+": in std_logic;\n")
  if i == network_dime*network_dime-1 and add_FI == False:
    noc_file.write("\tTX_L_"+str(i)+": out std_logic_vector (DATA_WIDTH-1 downto 0)\n")
  else:
    noc_file.write("\tTX_L_"+str(i)+": out std_logic_vector (DATA_WIDTH-1 downto 0);\n")

if add_FI:
  noc_file.write("\t--fault injector signals\n")
  for i in range(0, network_dime*network_dime):
    node_x = i % network_dime
    node_y = i / network_dime
    if node_y != network_dime-1:
      noc_file.write("\tFI_Add_"+str(i+network_dime)+"_"+str(i)+", FI_Add_"+str(i) +
                     "_"+str(i+network_dime)+": in std_logic_vector(integer(ceil(log2(real(DATA_WIDTH))))-1 downto 0);\n")
      noc_file.write("\tsta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime) +
                         ", sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime)+"_"+str(i)+": in std_logic;\n\n")
  for i in range(0, network_dime*network_dime):
      node_x = i % network_dime
      node_y = i / network_dime
      if node_x != network_dime -1 :
          noc_file.write("\tFI_Add_"+str(i+1)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+1) +
                         ": in std_logic_vector(integer(ceil(log2(real(DATA_WIDTH))))-1 downto 0);\n")
          if node_y != network_dime -1 :
              noc_file.write("\tsta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +
                             ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+": in std_logic;\n\n")
          else:
            noc_file.write("\tsta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +
                             ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+": in std_logic\n")

noc_file.write("            ); \n")
noc_file.write("end component; \n")

noc_file.write("\n")
noc_file.write("-- generating bulk signals...\n")
for i in range(0, network_dime*network_dime):
    noc_file.write("\tsignal RX_L_"+str(i)+", TX_L_"+str(i)+":  std_logic_vector ("+str(data_width-1)+" downto 0);\n")
    noc_file.write("\tsignal RTS_L_"+str(i)+", DRTS_L_"+str(i)+", CTS_L_"+str(i)+", DCTS_L_"+str(i) + ": std_logic;\n")
    noc_file.write("\t--------------\n")
noc_file.write("\n")    
noc_file.write("\t--fault injector signals\n")
for i in range(0, network_dime*network_dime):
  node_x = i % network_dime
  node_y = i / network_dime
  if node_y != network_dime-1:
    noc_file.write("\tsignal FI_Add_"+str(i+network_dime)+"_"+str(i)+", FI_Add_"+str(i) +
                   "_"+str(i+network_dime)+": std_logic_vector(integer(ceil(log2(real("+str(data_width-1)+"))))-1 downto 0) := (others=>'0');\n")
    noc_file.write("\tsignal sta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime) +
                       ", sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime)+"_"+str(i)+": std_logic :='0';\n\n")
for i in range(0, network_dime*network_dime):
    node_x = i % network_dime
    node_y = i / network_dime
    if node_x != network_dime -1 :
        noc_file.write("\tsignal FI_Add_"+str(i+1)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+1) +
                       ": std_logic_vector(integer(ceil(log2(real("+str(data_width-1)+"))))-1 downto 0):= (others=>'0');\n")
        noc_file.write("\tsignal sta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +
                        ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+": std_logic :='0';\n\n")



noc_file.write(" constant clk_period : time := 1 ns;\n")
noc_file.write("signal reset,clk: std_logic :='0';\n")

noc_file.write("\n")
noc_file.write("begin\n\n")


noc_file.write("   clk_process :process\n")
noc_file.write("   begin\n")
noc_file.write("        clk <= '0';\n")
noc_file.write("        wait for clk_period/2;   \n")
noc_file.write("        clk <= '1';\n")
noc_file.write("        wait for clk_period/2; \n")
noc_file.write("   end process;\n")
noc_file.write("\n")
noc_file.write("reset <= '1' after 1 ns;\n")

noc_file.write("-- instantiating the network\n")

noc_file.write("NoC: network_"+str(network_dime)+"x"+str(network_dime)+" generic map (DATA_WIDTH  => "+str(data_width)+")\n")
noc_file.write("PORT MAP (reset, clk, \n")
for i in range(network_dime*network_dime):    
  noc_file.write("\tRX_L_"+str(i)+", RTS_L_"+str(i)+", CTS_L_"+str(i)+", DRTS_L_"+str(i)+", DCTS_L_"+str(i)+", ")
  if i == network_dime*network_dime-1 and add_FI==False:
    noc_file.write("TX_L_"+str(i)+");\n")
  else:
    noc_file.write("TX_L_"+str(i)+",\n")
if add_FI:
  noc_file.write("\t--fault injector signals\n")
  for i in range(0, network_dime*network_dime):
    node_x = i % network_dime
    node_y = i / network_dime
    if node_y != network_dime-1:
      noc_file.write("\tFI_Add_"+str(i+network_dime)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+network_dime)+", \n")
      noc_file.write("\tsta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime) +
                       ", sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime)+"_"+str(i)+",\n\n")
  for i in range(0, network_dime*network_dime):
      node_x = i % network_dime
      node_y = i / network_dime
      if node_x != network_dime -1 :
          noc_file.write("\tFI_Add_"+str(i+1)+"_"+str(i)+", FI_Add_"+str(i)+"_"+str(i+1) + ",\n")
          if node_y != network_dime -1 :
              noc_file.write("\tsta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +
                             ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+",\n")
          else:
            noc_file.write("\tsta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1) +
                             ", sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+");\n")
noc_file.write("\n")
noc_file.write("-- connecting the packet generators\n")
if random_dest:
  for i in range(0, network_dime*network_dime):  
    random_length  = random.randint(3, 10)
    random_start = random.randint(3, 50)
    random_end = random.randint(random_start, 200)

    noc_file.write("gen_random_packet("+str(random_length)+", "+str(i)+", 1, "+str(random_start)+", " +
                    str(random_end)+" ns, clk, CTS_L_"+str(i)+", DRTS_L_"+str(i)+", RX_L_"+str(i)+");\n")
else:
  for i in range(0, network_dime*network_dime):  
    random_node = random.randint(0, network_dime*network_dime-1)
    while i == random_node:
      random_node = random.randint(0, (network_dime*network_dime)-1)
    random_length  = random.randint(3, 10)
    random_start = random.randint(3, 50)
    random_end = random.randint(random_start, 200)

    noc_file.write("gen_packet("+str(random_length)+", "+str(i)+", "+str(random_node)+", 1, "+str(random_start) +
                    ", "+str(random_end)+" ns, clk, CTS_L_"+str(i)+", DRTS_L_"+str(i)+", RX_L_"+str(i)+");\n")
noc_file.write("\n")
noc_file.write("-- connecting the packet receivers\n")
for i in range(0, network_dime*network_dime):    
  noc_file.write("get_packet("+str(data_width)+", 5,  clk, DCTS_L_"+str(i)+", RTS_L_"+str(i)+", TX_L_"+str(i)+");\n")


noc_file.write("\n")
if add_FI:
  noc_file.write("-- connecting the fault generators\n")
  for i in range(0, network_dime*network_dime):  
    node_x = i % network_dime
    node_y = i / network_dime
    if node_x != network_dime -1 :
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i+1)+"_"+str(i)+", sta1_"+str(i+1)+"_"+str(i)+", FI_Add_"+str(i+1)+"_"+str(i)+", "+str(random_delay)+","+ str(seed_1)+","+ str(seed_2)+");\n")
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i)+"_"+str(i+1)+", sta1_"+str(i)+"_"+str(i+1)+", FI_Add_"+str(i)+"_"+str(i+1)+", "+str(random_delay)+","+ str(seed_1)+","+ str(seed_2)+");\n")
    if node_y != network_dime-1:
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i+network_dime)+"_"+str(i)+", sta1_"+str(i+network_dime)+"_"+str(i)+", FI_Add_"+str(i+network_dime)+"_"+str(i)+", "+str(random_delay)+","+ str(seed_1)+","+ str(seed_2)+");\n")
      random_delay = random.randint(100, 200)
      seed_1 = random.randint(10, 2147483560)
      seed_2 = random.randint(10, 2147483560)
      noc_file.write("gen_fault(sta0_"+str(i)+"_"+str(i+network_dime)+", sta1_"+str(i)+"_"+str(i+network_dime)+", FI_Add_"+str(i)+"_"+str(i+network_dime)+", "+str(random_delay)+","+ str(seed_1)+","+ str(seed_2)+");\n")

noc_file.write("end;\n")
